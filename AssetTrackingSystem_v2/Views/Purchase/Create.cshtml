@using System.Web.UI.WebControls
@model AssetTrackingSystem_v2.ViewModels.PurchaseCreateVM

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_LayoutPage.cshtml";
}

@section CSS {
    <style>
        /* The switch - the box around the slider */
        .switch {
          position: relative;
          display: inline-block;
          width: 60px;
          height: 34px;
        }

        /* Hide default HTML checkbox */
        .switch input {display:none;}

        /* The slider */
        .slider {
          position: absolute;
          cursor: pointer;
          top: 0;
          left: 0;
          right: 0;
          bottom: 0;
          background-color: darkred;
          -webkit-transition: .4s;
          transition: .4s;
        }

        .slider:before {
          position: absolute;
          content: "";
          height: 26px;
          width: 26px;
          left: 4px;
          bottom: 4px;
          background-color: white;
          -webkit-transition: .4s;
          transition: .4s;
        }

        input:checked + .slider {
          background-color: green;
        }

        input:focus + .slider {
          box-shadow: 0 0 1px #2196F3;
        }

        input:checked + .slider:before {
          -webkit-transform: translateX(26px);
          -ms-transform: translateX(26px);
          transform: translateX(26px);
        }

        /* Rounded sliders */
        .slider.round {
          border-radius: 34px;
        }

        .slider.round:before {
          border-radius: 50%;
        }
    </style>
}

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <h4>Asset Purchase Entry</h4>
        <hr/>
        
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.PurchaseDate, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextBoxFor(model => model.PurchaseDate, new { @class = "form-control", Value = DateTime.Today.Date.ToShortDateString() })
                        @Html.ValidationMessageFor(model => model.PurchaseDate, "", new { @class = "text-danger" })
                    </div>
                </div>
            
                <div class="form-group">
                    @Html.LabelFor(model => model.VendorId, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.VendorId, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.VendorId, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
       
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.OrganizationId, new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.OrganizationId, Enumerable.Empty<SelectListItem>(), new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.OrganizationId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.BranchId, new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.BranchId, Enumerable.Empty<SelectListItem>(), new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.BranchId, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
        
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.FilePath, "Attach Document", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.TextBoxFor(model => model.FilePath, null, new { @class = "form-control", type = "file" })
                        @Html.ValidationMessageFor(model => model.FilePath, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <hr/>
        </div>

        <div class="row">
            
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control", @style = "text-transform:uppercase" } })
                        @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.CategoryId, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.CategoryId, Enumerable.Empty<SelectListItem>(), new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.GeneralCategoryId, new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.GeneralCategoryId, Enumerable.Empty<SelectListItem>(), new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.GeneralCategoryId, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ManufacturerId, new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.ManufacturerId, Enumerable.Empty<SelectListItem>(), new {@class = "form-control"})
                        @Html.ValidationMessageFor(model => model.ManufacturerId, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ModelId, htmlAttributes: new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.ModelId, Enumerable.Empty<SelectListItem>(), new {@class = "form-control"})
                        @Html.ValidationMessageFor(model => model.ModelId, "", new {@class = "text-danger"})
                    </div>
                </div>
            </div>
        
        </div>
        
        <div class="row">
        
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Quantity, htmlAttributes: new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Quantity, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.ValidationMessageFor(model => model.Quantity, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="form-group">
                    @Html.Label("Product Serial", htmlAttributes: new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        <label class="switch">
                            <input type="checkbox" id="productSerial">
                            <div class="slider round"></div>
                        </label>
                        @Html.ValidationMessageFor(model => model.Quantity, "", new {@class = "text-danger"})
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.UnitPrice, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.UnitPrice, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })
                    </div>
                </div>
                
                <div class="form-group">
                    <div class="checkbox container-fluid">          
                        @Html.LabelFor(model => model.HasWarranty, new { @class = "col-md-2 col-sm-2 col-xs-2" })
                        <div class="col-md-10 col-sm-10 col-xs-10">
                            @Html.CheckBoxFor(model => model.HasWarranty)
                            @Html.ValidationMessageFor(model => model.HasWarranty, "", new { @class = "text-danger" })
                        </div>
                        
                    </div>
                </div>
                    

                <div class="form-group">
                    @Html.LabelFor(model => model.WarrantyPeriod, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.WarrantyPeriod, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.WarrantyPeriod, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
        
        <div class="row container-fluid">
            <div class="col-md-offset-10">
                <div class="btn btn-default">Cancel</div>
                <div class="btn btn-info">Add</div>
            </div>
        </div>

        <div class="row">
            <hr/>
        </div>

        <div class="form-group">
            <div class="col-md-offset-6 col-md-6">
                <input type="submit" value="Create" class="btn btn-default"/>
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Search", "Purchase")
</div>

@section JavaScript {
    <script src="~/assets/js/jquery-ui.min.js"></script>

    <script type="text/javascript">
        $(document).ready(function() {
            $("#PurchaseDate").datepicker({
                showOtherMonths: true,
                selectOtherMonths: false,
                //isRTL:true,

                changeMonth: true,
                changeYear: true
                /*
                showButtonPanel: true,
                beforeShow: function() {
                    //change button colors
                    var datepicker = $(this).datepicker( "widget" );
                    setTimeout(function(){
                        var buttons = datepicker.find('.ui-datepicker-buttonpane')
                        .find('button');
                        buttons.eq(0).addClass('btn btn-xs');
                        buttons.eq(1).addClass('btn btn-xs btn-success');
                        buttons.wrapInner('<span class="bigger-110" />');
                    }, 0);

                }
                */
            });

            /* Auto Complete Initialization */
            $('#Code').autocomplete({
                source: GetCategoryCodeTags()
            });

            /* DropDownList initialization */
            GetOrganizationDDL();
            GetBranchDDL();
            GetManufacturerDDL();
            GetModelDLL();
            GetGeneralCategoryDDL();
            GetCategoryDDL('');

            /* Casecade DDL */
            $('#OrganizationId').change(function() {
                var organizationId = $('#OrganizationId').val();

                GetBranchDDL(organizationId);
            });

            $('#ManufacturerId').change(function() {
                var manufacturerId = $('#ManufacturerId').val();

                GetModelDLL(manufacturerId);
            });

            $('#GeneralCategoryId').change(function() {
                var generalCategoryId = $('#GeneralCategoryId').val();

                GetCategoryDDL(generalCategoryId);
            });

            $('#CategoryId').change(function () {
                var categoryId = $('#CategoryId').val();
                
                $('#Code').val();

                $.ajax({
                    url: '/Loader/GetCategoryById',
                    data: {
                        id : categoryId
                    },
                    contentType: 'application/json',
                    success: function(category) {
                        $('#Code').val(category.Code);
                    }
                });
            });

            $('#Code').change(function () {
                var manufacturerCode = $('#Code').val();

                $.ajax({
                    url: '/Loader/GetCategoryByCode',
                    contentType: 'application/json',
                    data: { code: manufacturerCode },
                    success: function(data) {
                        var categoryId = data.Id;
                        var generalCategoryId = data.GeneralCategoryId;

                        GetGeneralCategoryDDL(generalCategoryId);
                        GetCategoryDDL(generalCategoryId, categoryId);
                    }
                });
            });

            /* Auto Complete Methods */
            function GetCategoryCodeTags() {
                var manufacturerCodeTags = [];

                $.ajax({
                    url: '/Loader/GetAllCategories',
                    contentType: 'application/json',
                    success: function(data) {
                        $.each(data,
                            function (key, object) {
                                manufacturerCodeTags.push(object.Category.Code);
                            });
                    }
                });

                return manufacturerCodeTags;
            }

            /* DDL */
            function GetOrganizationDDL(selectedIndex) {
                var defaultOption = "<option value=''>Select Organization</option>";
                $('#OrganizationId').append(defaultOption);

                $.ajax({
                    url: '/Loader/GetAllOrganization',
                    contentType: 'application/json',
                    success: function(data) {
                        $.each(data,
                            function(key, organization) {
                                var options = "<option value='" + organization.Id + "' " + (selectedIndex == organization.Id ? 'selected' : '') + ">" + organization.Name + "</option>";
                                $('#OrganizationId').append(options);
                            });
                    }
                });
            }

            function GetBranchDDL(OrgId) {
                $('#BranchId').empty();
                var defaultDropDownValue = '<option value="">Select Branch</option>';
                $('#BranchId').append(defaultDropDownValue);

                if (OrgId != '') {
                    var jsonData = { id: OrgId }
                    $.ajax({
                        url: '/Loader/GetBranchesByOrganization',
                        contentType: 'application/json',
                        data: JSON.stringify(jsonData),
                        success: function(branchList) {
                            $.each(branchList,
                                function(key, branch) {

                                    if (branchList[key].OrganizationId == OrgId) {
                                        var option = "<option value=" + branch.Id + ">" + branch.Name + "</option>";
                                        $("#BranchId").append(option);
                                    }
                                });
                        }
                    });
                }
            }

            function GetManufacturerDDL() {
                var defaultOption = "<option value=''>Select Manufacturer</option>";
                $('#ManufacturerId').append(defaultOption);

                $.ajax({
                    url: '/Loader/GetAllManufacturer',
                    contentType: 'application/json',
                    success: function(data) {
                        $.each(data,
                            function(key, manufacturer) {
                                var options = "<option value='" +
                                    manufacturer.Id +
                                    "'>" +
                                    manufacturer.Name +
                                    "</option>";
                                $('#ManufacturerId').append(options);
                            });
                    }
                });
            }

            function GetModelDLL(manufacturerId) {
                $('#ModelId').empty();
                var defaultDropDownValue = '<option value="">Select Model</option>';
                $('#ModelId').append(defaultDropDownValue);

                if (manufacturerId != '') {
                    var jsonData = { id: manufacturerId }
                    $.ajax({
                        url: '/Loader/GetModelsByManufacturerId',
                        contentType: 'application/json',
                        data: JSON.stringify(jsonData),
                        success: function (modelList) {
                            $.each(modelList,
                                function (key, model) {

                                    if (modelList[key].ManufacturerId == manufacturerId) {
                                        var option = "<option value=" + model.Id + ">" + model.Name + "</option>";
                                        $("#ModelId").append(option);
                                    }
                                });
                        }
                    });
                }
            }

            function GetGeneralCategoryDDL(selectedIndex) {
                var defaultOption = "<option value=''>Select General Category</option>";
                $('#GeneralCategoryId').append(defaultOption);

                $.ajax({
                    url: '/Loader/GetAllGeneralCategory',
                    contentType: 'application/json',
                    success: function (data) {
                        $.each(data,
                            function (key, object) {
                                var options = "<option value='" + object.Id + "' " + (selectedIndex == object.Id ? 'selected' : '') + ">" + object.Name + "</option>";
                                $('#GeneralCategoryId').append(options);
                            });
                    }
                });
            }

            function GetCategoryDDL(genCatId, selectedIndex) {
                $('#CategoryId').empty();
                var defaultDropDownValue = '<option value="">Select Category</option>';
                $('#CategoryId').append(defaultDropDownValue);

                if (genCatId != '') {
                    var jsonData = { id: genCatId }
                    $.ajax({
                        url: '/Loader/GetAllCategories',
                        contentType: 'application/json',
                        data: JSON.stringify(jsonData),
                        success: function (modelList) {
                            $.each(modelList,
                                function (key, object) {

                                    if (object.Category.GeneralCategoryId == genCatId) {
                                        var option = "<option value='" + object.Category.Id + "' " + (selectedIndex == object.Category.Id ? 'selected' : '') + ">" + object.Category.Name + "</option>";
                                        $("#CategoryId").append(option);
                                    }
                                });
                        }
                    });
                }
            }
        });
    </script>
}